# Generated by Django 3.2 on 2021-05-04 03:30

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import events.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('creation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_code', models.CharField(max_length=100, unique=True)),
                ('institution_name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('pincode', models.PositiveIntegerField()),
                ('resource_center', models.BooleanField()),
                ('rating', models.PositiveSmallIntegerField()),
                ('contact_person', models.TextField()),
                ('remarks', models.TextField()),
                ('status', models.PositiveSmallIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Academic Center',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='CourseMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test', models.BooleanField(default=False)),
                ('category', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('foss',),
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3)),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Drupal2018_email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='HelpfulFor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('helpful_for', models.CharField(choices=[('0', 'Academic Performance'), ('1', 'Project Assignments'), ('2', 'To get job interviews'), ('3', 'To get jobs'), ('4', 'All of the above')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='InstituteCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Institute Categorie',
            },
        ),
        migrations.CreateModel(
            name='InstituteType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Invigilator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('appoved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invigilator_approved_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LabCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LatexWorkshopFileUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('file_upload', models.FileField(upload_to=events.models.get_email_dir)),
            ],
        ),
        migrations.CreateModel(
            name='LearnDrupalFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phonemob', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100)),
                ('affiliation', models.CharField(max_length=100)),
                ('place', models.CharField(max_length=100)),
                ('agegroup', models.CharField(choices=[('', '-----'), ('below25', 'below 25'), ('25to34', '25 to 34'), ('35to44', '35 to 44'), ('45to54', '45 to 54'), ('55to64', '55 to 64'), ('65andabove', '65 and above')], max_length=50)),
                ('currentstatus', models.CharField(choices=[('', '-----'), ('Student', 'Student'), ('Individuallearner', 'Individual learner'), ('Workingprofessional', 'Working professional'), ('Teacher', 'Teacher'), ('Administrator', 'Administrator'), ('Others', 'Others')], max_length=50)),
                ('currentstatus_other', models.CharField(max_length=50)),
                ('is_drupal_in_curriculum', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('NotApplicable ', 'Not Applicable ')], max_length=50)),
                ('need_help_in_organizing', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('NotApplicable ', 'Not Applicable ')], max_length=50)),
                ('when_plan_to_conduct', models.CharField(choices=[('', '-----'), ('within3months', 'within 3 months'), ('within6months', 'within 6 months'), ('within1year', 'within 1 year'), ('notyetplanned', 'not yet planned')], max_length=50)),
                ('language', models.CharField(choices=[('', '-----'), ('Hindi', 'Hindi'), ('English', 'English'), ('Marathi', 'Marathi'), ('Urdu', 'Urdu'), ('Kannanda', 'Kannanda'), ('Bangali', 'Bangali'), ('Malyalum', 'Malyalum'), ('Tamil', 'Tamil'), ('Telugu', 'Telugu'), ('Oriya', 'Oriya'), ('Assamese', 'Assamese'), ('Gujrati', 'Gujrati')], max_length=50)),
                ('did_undergo_st_training', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('NotApplicable ', 'Not Applicable ')], max_length=50)),
                ('rate_spoken', models.CharField(max_length=20)),
                ('useful_for_placement', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('NotApplicable ', 'Not Applicable ')], max_length=50)),
                ('useful_for_placement_for_students', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('NotApplicable ', 'Not Applicable ')], max_length=50)),
                ('feedback', models.CharField(max_length=500)),
                ('like_to_learn_other_foss', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No')], max_length=50)),
                ('mention_foss', models.CharField(max_length=100)),
                ('like_to_give_testimonial', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No')], max_length=50)),
                ('testimonial', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Organiser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('appoved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='organiser_approved_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='organiser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.PositiveIntegerField()),
                ('amount', models.CharField(max_length=20)),
                ('purpose', models.CharField(max_length=20, null=True)),
                ('status', models.PositiveIntegerField()),
                ('description', models.CharField(max_length=20, null=True)),
                ('gstno', models.CharField(max_length=15, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('academic_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('academic_id', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='PermissionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourcePerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_by', models.PositiveIntegerField()),
                ('status', models.BooleanField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Resource Person',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('even', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3)),
                ('name', models.CharField(max_length=50)),
                ('slug', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('longtitude', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('img_map_area', models.TextField()),
                ('has_map', models.BooleanField(default=1)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('users', models.ManyToManyField(related_name='resource_person', through='events.ResourcePerson', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('code', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(max_length=15)),
                ('verified', models.PositiveSmallIntegerField(default=0)),
                ('error', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='student_requests_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField()),
                ('stcount', models.PositiveIntegerField(default=0)),
                ('batch_name', models.CharField(max_length=200, null=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.department')),
                ('organiser', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.organiser')),
            ],
        ),
        migrations.CreateModel(
            name='StudentStream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_stream', models.CharField(choices=[('0', 'Engineering'), ('1', 'Science'), ('2', 'Arts and Humanities'), ('3', 'Polytechnic/ Diploma programs'), ('4', 'Commerce and Business Studies'), ('5', 'ITI'), ('6', 'Other')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_code', models.CharField(max_length=100)),
                ('tdate', models.DateField()),
                ('ttime', models.TimeField()),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('appoved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='test_approved_by', to=settings.AUTH_USER_MODEL)),
                ('department', models.ManyToManyField(to='events.Department')),
                ('foss', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.fosscategory')),
                ('invigilator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='test_invigilator', to='events.invigilator')),
                ('organiser', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='test_organiser', to='events.organiser')),
            ],
            options={
                'verbose_name': 'Test Categorie',
            },
        ),
        migrations.CreateModel(
            name='TestCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('status', models.BooleanField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='topperlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emailid', models.EmailField(max_length=100)),
                ('userid', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_type', models.PositiveIntegerField(default=0)),
                ('training_code', models.CharField(max_length=100, null=True)),
                ('tdate', models.DateField()),
                ('ttime', models.TimeField()),
                ('skype', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('trusted', models.BooleanField(default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('appoved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='training_approved_by', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.course')),
                ('department', models.ManyToManyField(to='events.Department')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingExtraFields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_name', models.CharField(max_length=200)),
                ('approximate_hour', models.PositiveIntegerField(default=0)),
                ('online_test', models.PositiveIntegerField(default=0)),
                ('is_tutorial_useful', models.BooleanField(default=0)),
                ('future_training', models.BooleanField(default=0)),
                ('recommend_to_others', models.BooleanField(default=0)),
                ('no_of_lab_session', models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingPlanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('organiser', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.organiser')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.semester')),
            ],
            options={
                'unique_together': {('year', 'academic', 'organiser', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('name', 'state')},
            },
        ),
        migrations.CreateModel(
            name='TrainingRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sem_start_date', models.DateField()),
                ('training_start_date', models.DateField(default=datetime.datetime.now)),
                ('training_end_date', models.DateField(default=datetime.datetime.now)),
                ('participants', models.PositiveIntegerField(default=0)),
                ('course_type', models.PositiveIntegerField(default=None)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('cert_status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.studentbatch')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.coursemap')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.department')),
                ('training_planner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.trainingplanner')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField()),
                ('status', models.PositiveSmallIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.training')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=255, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('updated', models.DateTimeField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.student')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.trainingrequest')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mdluser_id', models.PositiveIntegerField(blank=True, null=True)),
                ('firstname', models.CharField(max_length=100, null=True)),
                ('lastname', models.CharField(max_length=100, null=True)),
                ('gender', models.CharField(max_length=10, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.training')),
            ],
            options={
                'verbose_name': 'Training Attendance',
            },
        ),
        migrations.AddField(
            model_name='training',
            name='extra_fields',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.trainingextrafields'),
        ),
        migrations.AddField(
            model_name='training',
            name='foss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.fosscategory'),
        ),
        migrations.AddField(
            model_name='training',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.language'),
        ),
        migrations.AddField(
            model_name='training',
            name='organiser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.organiser'),
        ),
        migrations.CreateModel(
            name='TestLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.test')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Testimonials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=200)),
                ('actual_content', models.TextField()),
                ('minified_content', models.TextField()),
                ('short_description', models.TextField()),
                ('source_title', models.CharField(max_length=200, null=True)),
                ('source_link', models.URLField(null=True)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='testimonial_approved_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='testimonial_created_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='test',
            name='test_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='category_tests', to='events.testcategory'),
        ),
        migrations.AddField(
            model_name='test',
            name='training',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.trainingrequest'),
        ),
        migrations.CreateModel(
            name='SingleTraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_type', models.PositiveIntegerField(default=0)),
                ('tdate', models.DateField()),
                ('ttime', models.TimeField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('participant_count', models.PositiveIntegerField(default=0)),
                ('total_participant_count', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.coursemap')),
                ('institution_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.institutetype')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.language')),
                ('organiser', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.organiser')),
                ('state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.state')),
            ],
            options={
                'unique_together': {('organiser', 'academic', 'course', 'tdate', 'ttime')},
            },
        ),
        migrations.AddField(
            model_name='resourceperson',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state'),
        ),
        migrations.AddField(
            model_name='resourceperson',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='permission_assigned_by', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='permission_district', to='events.district')),
                ('institute', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='permission_district', to='events.academiccenter')),
                ('institute_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='permission_institution_type', to='events.institutetype')),
                ('permissiontype', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.permissiontype')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='permission_state', to='events.state')),
                ('university', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='permission_iniversity', to='events.university')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='permission_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentTransactionDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requestType', models.CharField(max_length=2)),
                ('amount', models.CharField(max_length=20)),
                ('reqId', models.CharField(max_length=50)),
                ('transId', models.CharField(max_length=100)),
                ('refNo', models.CharField(max_length=50)),
                ('provId', models.CharField(max_length=50)),
                ('status', models.CharField(max_length=2)),
                ('msg', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('paymentdetail', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.paymentdetails')),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganiserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganiserFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100)),
                ('gender', models.CharField(choices=[('', '-----'), ('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('age', models.CharField(choices=[('', '-----'), ('<25', '<25 years'), ('25-35', '25-35 years'), ('35+', '35 years and above')], max_length=20)),
                ('designation', models.CharField(choices=[('', '-----'), ('Student', 'Student'), ('Faculty', 'Faculty'), ('Staff', 'Staff'), ('Admin', 'Admin')], max_length=20)),
                ('medium_of_instruction', models.CharField(choices=[('', '-----'), ('English', 'English'), ('Vernacular', 'Vernacular'), ('Mixed', 'Mixed')], max_length=50)),
                ('student_education_language', models.CharField(choices=[('', '-----'), ('English', 'Mostly English'), ('Vernacular', 'Mostly Vernacular'), ('Mixed', 'Mostly Mixed')], max_length=50)),
                ('student_gender', models.CharField(choices=[('', '-----'), ('Male', 'Mostly Male'), ('Female', 'Mostly Female'), ('Mixed', 'Mixed')], max_length=50)),
                ('student_location', models.CharField(choices=[('', '-----'), ('Urban', 'Mainly Urban'), ('Rural', 'Mainly Rural'), ('Mixed', 'Mixed'), ('Notsure', 'Not sure')], max_length=50)),
                ('duration_of_tutorial', models.CharField(choices=[('', '-----'), ('<0.5', 'Less than 0.5 hour'), ('0.5-2', '0.5 - 2 hour'), ('2-10', '2-10 hours'), ('10+', 'Above 10 hours'), ('NA', 'Not applicable')], max_length=50)),
                ('side_by_side_yes_no', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No')], max_length=50)),
                ('side_by_side_method_is', models.CharField(choices=[('', '-----'), ('0', 'Explaining the video to a neighbor'), ('1', 'Waiting for mentors explanation'), ('2', 'Watching and practicing simultaneously'), ('3', 'Dont know what this method is')], max_length=50)),
                ('in_side_by_side_method', models.CharField(choices=[('', '-----'), ('0', 'The video has to be maximized'), ('1', 'The software has to be maximized'), ('2', 'Both software and video are maximized'), ('3', 'None of the above are maximized')], max_length=50)),
                ('good_investment', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('Notsure', 'Not sure')], max_length=50)),
                ('is_comfortable_self_learning', models.CharField(choices=[('', '-----'), ('StronglyAgree', 'Strongly Agree'), ('Agree', 'Agree'), ('Neutral', 'Neutral'), ('Disagree', 'Disagree'), ('StronglyDisagree', 'Strongly Disagree'), ('Noidea', 'No idea')], max_length=50)),
                ('is_classroom_better', models.CharField(choices=[('', '-----'), ('StronglyAgree', 'Strongly Agree'), ('Agree', 'Agree'), ('Neutral', 'Neutral'), ('Disagree', 'Disagree'), ('StronglyDisagree', 'Strongly Disagree'), ('Noidea', 'No idea')], max_length=50)),
                ('is_student_expectations', models.CharField(choices=[('', '-----'), ('StronglyAgree', 'Strongly Agree'), ('Agree', 'Agree'), ('Neutral', 'Neutral'), ('Disagree', 'Disagree'), ('StronglyDisagree', 'Strongly Disagree'), ('Noidea', 'No idea')], max_length=50)),
                ('is_help_get_interview', models.CharField(choices=[('', '-----'), ('StronglyAgree', 'Strongly Agree'), ('Agree', 'Agree'), ('Neutral', 'Neutral'), ('Disagree', 'Disagree'), ('StronglyDisagree', 'Strongly Disagree'), ('Noidea', 'No idea')], max_length=50)),
                ('is_help_get_job', models.CharField(choices=[('', '-----'), ('StronglyAgree', 'Strongly Agree'), ('Agree', 'Agree'), ('Neutral', 'Neutral'), ('Disagree', 'Disagree'), ('StronglyDisagree', 'Strongly Disagree'), ('Noidea', 'No idea')], max_length=50)),
                ('is_got_job', models.CharField(choices=[('', '-----'), ('StronglyAgree', 'Strongly Agree'), ('Agree', 'Agree'), ('Neutral', 'Neutral'), ('Disagree', 'Disagree'), ('StronglyDisagree', 'Strongly Disagree'), ('Noidea', 'No idea')], max_length=50)),
                ('relevance', models.CharField(choices=[('', '-----'), ('Excellent', 'Excellent'), ('Good', 'Good'), ('Fair', 'Fair'), ('Bad', 'Bad'), ('Verybad', 'Very bad')], max_length=50)),
                ('information_content', models.CharField(choices=[('', '-----'), ('Excellent', 'Excellent'), ('Good', 'Good'), ('Fair', 'Fair'), ('Bad', 'Bad'), ('Verybad', 'Very bad')], max_length=50)),
                ('audio_video_quality', models.CharField(choices=[('', '-----'), ('Excellent', 'Excellent'), ('Good', 'Good'), ('Fair', 'Fair'), ('Bad', 'Bad'), ('Verybad', 'Very bad')], max_length=50)),
                ('presentation_quality', models.CharField(choices=[('', '-----'), ('Excellent', 'Excellent'), ('Good', 'Good'), ('Fair', 'Fair'), ('Bad', 'Bad'), ('Verybad', 'Very bad')], max_length=50)),
                ('overall_rating', models.CharField(choices=[('', '-----'), ('Excellent', 'Excellent'), ('Good', 'Good'), ('Fair', 'Fair'), ('Bad', 'Bad'), ('Verybad', 'Very bad')], max_length=50)),
                ('is_training_benefited', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No'), ('Notsure', 'Not sure')], max_length=50)),
                ('testimonial', models.CharField(max_length=500)),
                ('any_other_suggestions', models.CharField(max_length=500)),
                ('can_contact', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No')], max_length=50)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.city')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.district')),
                ('helpful_for', models.ManyToManyField(related_name='events_HelpfulFor_related', to='events.HelpfulFor')),
                ('language', models.ManyToManyField(related_name='events_Language_related', to='creation.Language')),
                ('offered_training_foss', models.ManyToManyField(related_name='events_FossCategory_related', to='creation.FossCategory')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state')),
                ('student_stream', models.ManyToManyField(related_name='events_StudentStream_related', to='events.StudentStream')),
                ('trained_foss', models.ManyToManyField(to='creation.FossCategory')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
            ],
        ),
        migrations.CreateModel(
            name='MumbaiStudents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.studentbatch')),
                ('stuid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.student')),
            ],
        ),
        migrations.CreateModel(
            name='MediaTestimonials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255)),
                ('user', models.CharField(max_length=255)),
                ('workshop_details', models.CharField(default='Workshop', max_length=255)),
                ('content', models.CharField(max_length=500)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('foss', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.fosscategory')),
            ],
            options={
                'verbose_name': 'Media Testimonials',
                'verbose_name_plural': 'Media Testimonials',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('pincode', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.district')),
            ],
            options={
                'unique_together': {('name', 'district', 'pincode')},
            },
        ),
        migrations.CreateModel(
            name='InductionInterest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('phonemob', models.CharField(max_length=100)),
                ('age', models.CharField(choices=[('', '-----'), ('20to25', '20 to 25 years'), ('26to30', '26 to 30 years'), ('31to35', '31 to 35 years'), ('35andabove', 'Above 35 years')], max_length=100)),
                ('gender', models.CharField(choices=[('', '-----'), ('Male', 'Male'), ('Female', 'Female')], max_length=50)),
                ('mother_tongue', models.CharField(choices=[('', '-----'), ('Assamese', 'Assamese'), ('Bengali', 'Bengali'), ('Bhojpuri', 'Bhojpuri'), ('Bodo', 'Bodo'), ('English', 'English'), ('Gujarati', 'Gujarati'), ('Hindi', 'Hindi'), ('Kannada', 'Kannada'), ('Kashmiri', 'Kashmiri'), ('Khasi', 'Khasi'), ('Konkani', 'Konkani'), ('Maithili', 'Maithili'), ('Malayalam', 'Malayalam'), ('Manipuri', 'Manipuri'), ('Marathi', 'Marathi'), ('Nepali', 'Nepali'), ('Oriya', 'Oriya'), ('Punjabi', 'Punjabi'), ('Rajasthani', 'Rajasthani'), ('Sanskrit', 'Sanskrit'), ('Santhali', 'Santhali'), ('Sindhi', 'Sindhi'), ('Tamil', 'Tamil'), ('Telugu', 'Telugu'), ('Urdu', 'Urdu'), ('Other', 'Other')], max_length=100)),
                ('other_language', models.CharField(max_length=100)),
                ('medium_of_studies', models.CharField(choices=[('', '-----'), ('Assamese', 'Assamese'), ('Bengali', 'Bengali'), ('Bhojpuri', 'Bhojpuri'), ('Bodo', 'Bodo'), ('English', 'English'), ('Gujarati', 'Gujarati'), ('Hindi', 'Hindi'), ('Kannada', 'Kannada'), ('Kashmiri', 'Kashmiri'), ('Khasi', 'Khasi'), ('Konkani', 'Konkani'), ('Maithili', 'Maithili'), ('Malayalam', 'Malayalam'), ('Manipuri', 'Manipuri'), ('Marathi', 'Marathi'), ('Nepali', 'Nepali'), ('Oriya', 'Oriya'), ('Punjabi', 'Punjabi'), ('Rajasthani', 'Rajasthani'), ('Sanskrit', 'Sanskrit'), ('Santhali', 'Santhali'), ('Sindhi', 'Sindhi'), ('Tamil', 'Tamil'), ('Telugu', 'Telugu'), ('Urdu', 'Urdu'), ('Other', 'Other')], max_length=100)),
                ('other_medium', models.CharField(max_length=100)),
                ('education', models.CharField(choices=[('', '-----'), ('3yeargraduatedegree(BABScB.Cometc)', '3 year graduate degree (BA, BSc, B.Com, etc.)'), ('Professionaldegree(BEBTechetc)', 'Professional degree (BE, B.Tech, etc.)'), ('2yearMasters(MAMScMCometc)', '2 year Masters (MA, MSc, MCom, etc.)'), ('2yearprofessionalMasters(MEMTechMBAMPhiletc)', '2 year professional Masters (ME, MTech, MBA, MPhil, etc.)'), ('PhD', 'PhD'), ('Other', 'Other')], max_length=100)),
                ('other_education', models.CharField(max_length=100)),
                ('specialisation', models.CharField(choices=[('', '-----'), ('Arts', 'Arts'), ('Science', 'Science'), ('Commerce', 'Commerce'), ('EngineeringorComputerScience ', 'Engineering or Computer Science'), ('Management', 'Management'), ('Other', 'Other')], max_length=100)),
                ('other_specialisation', models.CharField(max_length=100)),
                ('designation', models.CharField(choices=[('', '-----'), ('Lecturer', 'Lecturer'), ('AssistantProfessor', 'Assistant Professor'), ('AssociateProfessor', 'Associate Professor'), ('Professor', 'Professor'), ('Other', 'Other')], max_length=100)),
                ('other_designation', models.CharField(max_length=100)),
                ('college', models.CharField(max_length=100)),
                ('college_address', models.CharField(max_length=500)),
                ('city', models.CharField(max_length=100)),
                ('pincode', models.PositiveIntegerField()),
                ('experience_in_college', models.CharField(choices=[('', '-----'), ('Lessthan1year', 'Less than 1 year'), ('Morethan1yearbutlessthan2years', 'More than 1 year, but less than 2 years'), ('Morethan2yearsbutlessthan5years', 'More than 2 years but less than 5 years'), ('Morethan5years', 'More than 5 years')], max_length=100)),
                ('bring_laptop', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No')], max_length=50)),
                ('borrow_laptop', models.CharField(choices=[('', '-----'), ('Yes', 'Yes'), ('No', 'No')], max_length=50)),
                ('do_agree', models.CharField(choices=[('', '-----'), ('Yes', 'Yes')], max_length=50)),
                ('no_objection', models.CharField(choices=[('', '-----'), ('Yes', 'Yes')], max_length=50)),
                ('other_comments', models.CharField(max_length=500)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state')),
            ],
            options={
                'ordering': ('city',),
            },
        ),
        migrations.CreateModel(
            name='InductionFinalList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=200)),
                ('code', models.CharField(default=None, max_length=255)),
                ('batch_code', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('eoi_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to='events.inductioninterest')),
            ],
        ),
        migrations.CreateModel(
            name='FossMdlCourses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mdlcourse_id', models.PositiveIntegerField()),
                ('mdlquiz_id', models.PositiveIntegerField()),
                ('foss', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.fosscategory')),
            ],
        ),
        migrations.CreateModel(
            name='EventsNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(default=0)),
                ('category', models.PositiveSmallIntegerField(default=0)),
                ('categoryid', models.PositiveIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('message', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='district',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state'),
        ),
        migrations.AddField(
            model_name='coursemap',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.labcourse'),
        ),
        migrations.AddField(
            model_name='coursemap',
            name='foss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='creation.fosscategory'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state'),
        ),
        migrations.CreateModel(
            name='Accountexecutive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('academic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('appoved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='accountexecutive_approved_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='accountexecutive', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AcademicPaymentStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_the_payer', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('phone', models.CharField(max_length=100, null=True)),
                ('amount', models.CharField(max_length=20)),
                ('subscription', models.CharField(choices=[('', '-----'), ('365', 'One_Year'), ('182', 'Six_Months')], max_length=50)),
                ('transactionid', models.CharField(max_length=100, null=True)),
                ('payment_date', models.DateField()),
                ('payment_status', models.CharField(choices=[('', '-----'), ('New', 'New'), ('Renewal', 'Renewal')], max_length=50)),
                ('college_type', models.CharField(choices=[('', '-----'), ('Engg', 'Engg'), ('ASC', 'ASC'), ('University', 'University'), ('School', 'School')], max_length=50)),
                ('pan_number', models.CharField(max_length=100, null=True)),
                ('gst_number', models.CharField(max_length=15, null=True)),
                ('customer_id', models.CharField(max_length=50, null=True)),
                ('invoice_no', models.CharField(max_length=100, null=True)),
                ('remarks', models.CharField(max_length=200, null=True)),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
                ('entry_user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state')),
            ],
            options={
                'unique_together': {('academic', 'transactionid', 'payment_date')},
            },
        ),
        migrations.CreateModel(
            name='AcademicKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('u_key', models.CharField(max_length=50)),
                ('hex_key', models.CharField(max_length=50)),
                ('expiry_date', models.DateField()),
                ('entry_date', models.DateTimeField(auto_now_add=True)),
                ('ac_pay_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academicpaymentstatus')),
                ('academic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.academiccenter')),
            ],
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.city'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='district',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.district'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='institute_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.institutecategory'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='institution_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.institutetype'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.location'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.state'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.university'),
        ),
        migrations.AddField(
            model_name='academiccenter',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TrainingLiveFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_workshop', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('branch', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=100)),
                ('content', models.PositiveSmallIntegerField()),
                ('sequence', models.PositiveSmallIntegerField()),
                ('clarity', models.PositiveSmallIntegerField()),
                ('interesting', models.PositiveSmallIntegerField()),
                ('appropriate_example', models.PositiveSmallIntegerField()),
                ('instruction_sheet', models.PositiveSmallIntegerField()),
                ('assignment', models.PositiveSmallIntegerField()),
                ('pace_of_tutorial', models.PositiveSmallIntegerField()),
                ('workshop_learnt', models.TextField()),
                ('weakness_workshop', models.BooleanField()),
                ('weakness_narration', models.BooleanField()),
                ('weakness_understand', models.BooleanField()),
                ('other_weakness', models.TextField()),
                ('tutorial_language', models.PositiveSmallIntegerField()),
                ('apply_information', models.PositiveSmallIntegerField()),
                ('if_apply_information_yes', models.TextField()),
                ('setup_learning', models.PositiveSmallIntegerField()),
                ('computers_lab', models.PositiveSmallIntegerField()),
                ('audio_quality', models.PositiveSmallIntegerField()),
                ('video_quality', models.PositiveSmallIntegerField()),
                ('workshop_orgainsation', models.PositiveSmallIntegerField()),
                ('faciliate_learning', models.PositiveSmallIntegerField()),
                ('motivate_learners', models.PositiveSmallIntegerField()),
                ('time_management', models.PositiveSmallIntegerField()),
                ('knowledge_about_software', models.PositiveSmallIntegerField()),
                ('provide_clear_explanation', models.PositiveSmallIntegerField()),
                ('answered_questions', models.PositiveSmallIntegerField()),
                ('interested_helping', models.PositiveSmallIntegerField()),
                ('executed_workshop', models.PositiveSmallIntegerField()),
                ('workshop_improved', models.TextField()),
                ('recommend_workshop', models.PositiveSmallIntegerField()),
                ('reason_why', models.TextField()),
                ('other_comments', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.singletraining')),
            ],
            options={
                'unique_together': {('training', 'email')},
            },
        ),
        migrations.CreateModel(
            name='TrainingLanguageFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mdluser_id', models.PositiveIntegerField()),
                ('name', models.CharField(default=None, max_length=100, null=True)),
                ('age', models.PositiveIntegerField()),
                ('medium_of_instruction', models.PositiveIntegerField()),
                ('gender', models.BooleanField()),
                ('tutorial_was_useful', models.PositiveIntegerField()),
                ('learning_experience', models.PositiveIntegerField()),
                ('satisfied_with_learning_experience', models.PositiveIntegerField()),
                ('concept_explain_clearity', models.PositiveIntegerField()),
                ('overall_learning_experience', models.PositiveIntegerField()),
                ('user_interface', models.PositiveIntegerField()),
                ('understanding_difficult_concept', models.PositiveIntegerField()),
                ('curious_and_motivated', models.PositiveIntegerField()),
                ('similar_tutorial_with_other_content', models.PositiveIntegerField()),
                ('foss_tutorial_was_mentally_demanding', models.PositiveIntegerField()),
                ('side_by_side_method_is_understood', models.PositiveIntegerField(default=0)),
                ('compfortable_learning_in_language', models.PositiveIntegerField()),
                ('confidence_level_in_language', models.PositiveIntegerField()),
                ('preferred_language', models.PositiveIntegerField()),
                ('preferred_language_reason', models.TextField()),
                ('prefer_translation_in_mother_tongue', models.PositiveIntegerField()),
                ('prefer_translation_in_mother_tongue_reason', models.TextField()),
                ('side_by_side_method_meant', models.PositiveIntegerField()),
                ('side_by_side_method_is_beneficial', models.PositiveIntegerField()),
                ('side_by_side_method_is_beneficial_reason', models.TextField()),
                ('limitations_of_side_by_side_method', models.TextField()),
                ('content_information_flow', models.PositiveIntegerField()),
                ('content_appropriate_examples', models.PositiveIntegerField()),
                ('content_ease_of_understanding', models.PositiveIntegerField()),
                ('content_clarity_of_instruction_sheet', models.PositiveIntegerField()),
                ('content_ease_of_performing_assignment', models.PositiveIntegerField()),
                ('content_best_features', models.TextField()),
                ('content_areas_of_improvement', models.TextField()),
                ('video_audio_video_synchronization', models.PositiveIntegerField()),
                ('video_attractive_color_features', models.PositiveIntegerField()),
                ('video_text_readable', models.PositiveIntegerField()),
                ('video_best_features', models.TextField()),
                ('video_areas_of_improvement', models.TextField()),
                ('audio_pleasant_speech_and_accent', models.PositiveIntegerField()),
                ('audio_soothing_and_friendly_tone', models.PositiveIntegerField()),
                ('audio_understandable_and_clear_speech', models.PositiveIntegerField()),
                ('audio_best_features', models.TextField()),
                ('audio_areas_of_improvement', models.TextField()),
                ('side_by_side_method_is_effective', models.PositiveIntegerField(default=0)),
                ('side_by_side_method_is', models.PositiveIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('language_prefered', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='creation.language')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.trainingrequest')),
            ],
            options={
                'unique_together': {('training', 'mdluser_id')},
            },
        ),
        migrations.CreateModel(
            name='TrainingFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mdluser_id', models.PositiveIntegerField()),
                ('rate_workshop', models.PositiveSmallIntegerField()),
                ('content', models.PositiveSmallIntegerField()),
                ('sequence', models.PositiveSmallIntegerField()),
                ('clarity', models.PositiveSmallIntegerField()),
                ('interesting', models.PositiveSmallIntegerField()),
                ('appropriate_example', models.PositiveSmallIntegerField()),
                ('instruction_sheet', models.PositiveSmallIntegerField()),
                ('assignment', models.PositiveSmallIntegerField()),
                ('pace_of_tutorial', models.PositiveSmallIntegerField()),
                ('workshop_learnt', models.TextField()),
                ('weakness_workshop', models.BooleanField()),
                ('weakness_narration', models.BooleanField()),
                ('weakness_understand', models.BooleanField()),
                ('other_weakness', models.TextField()),
                ('tutorial_language', models.PositiveSmallIntegerField()),
                ('apply_information', models.PositiveSmallIntegerField()),
                ('if_apply_information_yes', models.TextField()),
                ('setup_learning', models.PositiveSmallIntegerField()),
                ('computers_lab', models.PositiveSmallIntegerField()),
                ('audio_quality', models.PositiveSmallIntegerField()),
                ('video_quality', models.PositiveSmallIntegerField()),
                ('workshop_orgainsation', models.PositiveSmallIntegerField()),
                ('faciliate_learning', models.PositiveSmallIntegerField()),
                ('motivate_learners', models.PositiveSmallIntegerField()),
                ('time_management', models.PositiveSmallIntegerField()),
                ('knowledge_about_software', models.PositiveSmallIntegerField()),
                ('provide_clear_explanation', models.PositiveSmallIntegerField()),
                ('answered_questions', models.PositiveSmallIntegerField()),
                ('interested_helping', models.PositiveSmallIntegerField()),
                ('executed_workshop', models.PositiveSmallIntegerField()),
                ('workshop_improved', models.TextField()),
                ('recommend_workshop', models.PositiveSmallIntegerField()),
                ('reason_why', models.TextField()),
                ('other_comments', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.trainingrequest')),
            ],
            options={
                'unique_together': {('training', 'mdluser_id')},
            },
        ),
        migrations.CreateModel(
            name='TrainingAttend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('language', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to='creation.language')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.student')),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.trainingrequest')),
            ],
            options={
                'unique_together': {('training', 'student')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='training',
            unique_together={('organiser', 'academic', 'foss', 'tdate', 'ttime')},
        ),
        migrations.CreateModel(
            name='TestAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mdluser_firstname', models.CharField(max_length=100)),
                ('mdluser_lastname', models.CharField(max_length=100)),
                ('mdluser_id', models.PositiveIntegerField()),
                ('mdlcourse_id', models.PositiveIntegerField(default=0)),
                ('mdlquiz_id', models.PositiveIntegerField(default=0)),
                ('mdlattempt_id', models.PositiveIntegerField(default=0)),
                ('password', models.CharField(max_length=100, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='events.student')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.test')),
            ],
            options={
                'verbose_name': 'Test Attendance',
                'unique_together': {('test', 'mdluser_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='test',
            unique_together={('organiser', 'academic', 'foss', 'tdate', 'ttime')},
        ),
        migrations.CreateModel(
            name='StudentMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moved', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.studentbatch')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.student')),
            ],
            options={
                'ordering': ['student__user__first_name'],
                'unique_together': {('batch', 'student')},
            },
        ),
        migrations.CreateModel(
            name='SingleTrainingAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foss', models.PositiveIntegerField(default=0)),
                ('firstname', models.CharField(max_length=100, null=True)),
                ('lastname', models.CharField(max_length=100, null=True)),
                ('gender', models.CharField(max_length=10, null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('count', models.PositiveSmallIntegerField(default=0)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.singletraining')),
            ],
            options={
                'unique_together': {('training', 'firstname', 'lastname', 'email')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='resourceperson',
            unique_together={('user', 'state')},
        ),
        migrations.AlterUniqueTogether(
            name='district',
            unique_together={('state', 'code', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='coursemap',
            unique_together={('course', 'foss', 'category')},
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('name', 'state')},
        ),
    ]
